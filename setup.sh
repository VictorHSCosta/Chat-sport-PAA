#!/bin/bash

# Script de configura√ß√£o inicial do projeto
echo "üèÜ Configura√ß√£o Inicial - World Cup RAG Chatbot"
echo "‚ö° Preparando chatbot especializado em Copa do Mundo FIFA"
echo ""

# Cores
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
RED='\033[0;31m'
NC='\033[0m'

log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# 1. Verificar Python
log_info "Verificando Python..."
python3 --version || {
    log_error "Python 3 n√£o encontrado. Instale Python 3.8+"
    exit 1
}
log_success "Python encontrado"

# 2. Verificar se Ollama est√° instalado
log_info "Verificando Ollama..."
if command -v ollama &> /dev/null; then
    log_success "Ollama encontrado"
    
    # Verificar se qwen2.5:3b est√° instalado (modelo principal para portugu√™s)
    if ollama list | grep -q "qwen2.5:3b"; then
        log_success "Qwen2.5:3b (modelo principal) j√° instalado"
    else
        log_info "Baixando Qwen2.5:3b - modelo principal otimizado para portugu√™s..."
        if ollama pull qwen2.5:3b; then
            log_success "Qwen2.5:3b instalado com sucesso"
        else
            log_warning "Falha ao baixar qwen2.5:3b, mas vamos tentar o fallback"
        fi
    fi
    
    # Manter llama3.2 como fallback obrigat√≥rio
    if ollama list | grep -q "llama3.2"; then
        log_success "Llama3.2 (fallback) tamb√©m dispon√≠vel"
    else
        log_info "Baixando Llama3.2 como modelo de fallback..."
        if ollama pull llama3.2; then
            log_success "Llama3.2 fallback instalado com sucesso"
        else
            log_error "Falha cr√≠tica: nem qwen2.5:3b nem llama3.2 dispon√≠veis"
            exit 1
        fi
    fi
else
    log_warning "Ollama n√£o encontrado. Instale Ollama antes de continuar:"
    echo "curl -fsSL https://ollama.ai/install.sh | sh"
    echo "ollama pull qwen2.5:3b"
    echo "ollama pull llama3.2"
    exit 1
fi

# 3. Criar ambiente virtual se n√£o existir
log_info "Configurando ambiente virtual Python..."
cd ~/Chat-sport-PAA/backend

if [ ! -d "footbot" ]; then
    python3 -m venv footbot
    log_success "Ambiente virtual criado"
else
    log_success "Ambiente virtual j√° existe"
fi

# 4. Ativar e instalar depend√™ncias
source footbot/bin/activate
log_info "Instalando depend√™ncias Python..."
pip install --upgrade pip
pip install -r requirements.txt
log_success "Depend√™ncias Python instaladas"

# 5. Verificar Node.js e gerenciador de pacotes
log_info "Verificando Node.js..."
cd ~/Chat-sport-PAA/Front/front-end

if ! command -v node &> /dev/null; then
    log_error "Node.js n√£o encontrado! Instale Node.js 16+ primeiro."
    exit 1
fi

# Verificar qual gerenciador de pacotes usar
if command -v pnpm &> /dev/null; then
    log_info "Usando pnpm para depend√™ncias do frontend..."
    pnpm install
elif command -v yarn &> /dev/null; then
    log_info "Usando yarn para depend√™ncias do frontend..."
    yarn install
else
    log_info "Usando npm para depend√™ncias do frontend..."
    npm install
fi

log_success "Depend√™ncias do frontend instaladas"

# 7. Verificar dados da Copa do Mundo
log_info "Verificando dados da Copa do Mundo..."
cd ~/Chat-sport-PAA/backend

if [ ! -d "wcdataset" ]; then
    log_error "Diret√≥rio wcdataset n√£o encontrado!"
    log_info "Extraindo dados do arquivo zip..."
    if [ -f "wcdataset.zip" ]; then
        unzip -q wcdataset.zip
        log_success "Dados extra√≠dos com sucesso"
    else
        log_error "Arquivo wcdataset.zip n√£o encontrado!"
        exit 1
    fi
fi

csv_count=$(find wcdataset -name "*.csv" | wc -l)
if [ $csv_count -eq 0 ]; then
    log_error "Nenhum arquivo CSV encontrado em wcdataset!"
    exit 1
fi

log_success "Encontrados $csv_count arquivos CSV de dados da Copa do Mundo"

# Verificar conte√∫do dos CSVs principais
for csv_file in wcdataset/*.csv; do
    if [ -f "$csv_file" ]; then
        lines=$(wc -l < "$csv_file")
        log_info "$(basename "$csv_file"): $lines linhas"
    fi
done

# 8. Criar √≠ndice FAISS otimizado com dados ultra-estruturados da Copa do Mundo
log_info "Preparando sistema RAG ultra-restritivo..."
cd ~/Chat-sport-PAA/backend
source footbot/bin/activate

# Remover √≠ndices antigos para for√ßar recria√ß√£o com dados ultra-estruturados
if [ -d "faiss_index_" ]; then
    rm -rf faiss_index_
    log_info "√çndice antigo removido"
fi

if [ -d "faiss_index_enhanced_" ]; then
    rm -rf faiss_index_enhanced_
    log_info "√çndice avan√ßado antigo removido"
fi

# Testar se conseguimos importar os m√≥dulos necess√°rios
python -c "
import sys
import os
try:
    import pandas as pd
    import glob
    from langchain_community.vectorstores import FAISS
    from langchain_community.embeddings import HuggingFaceEmbeddings
    from langchain.text_splitter import RecursiveCharacterTextSplitter
    from langchain_core.documents import Document
    from sentence_transformers import SentenceTransformer
    
    # Verificar se conseguimos carregar os CSVs
    csv_files = glob.glob(os.path.join('wcdataset', '*.csv'))
    if not csv_files:
        print('‚ùå Nenhum arquivo CSV encontrado')
        sys.exit(1)
    
    for csv_file in csv_files:
        try:
            df = pd.read_csv(csv_file, encoding='utf-8')
            print(f'‚úÖ {os.path.basename(csv_file)}: {len(df)} linhas, {len(df.columns)} colunas')
        except Exception as e:
            print(f'‚ùå Erro ao ler {csv_file}: {e}')
            sys.exit(1)
    
    print('‚úÖ Todos os CSVs verificados e estruturados para RAG ultra-restritivo')
    print('‚úÖ Dados preparados para evitar confus√£o entre sede e campe√£o')
    print('‚úÖ M√∫ltiplas varia√ß√µes de perguntas em portugu√™s configuradas')
    print('‚úÖ Depend√™ncias do RAG ultra-restritivo OK')
except ImportError as e:
    print(f'‚ùå Erro de importa√ß√£o: {e}')
    sys.exit(1)
except Exception as e:
    print(f'‚ùå Erro geral: {e}')
    sys.exit(1)
"

if [ $? -eq 0 ]; then
    log_success "Depend√™ncias do sistema RAG verificadas"
else
    log_error "Erro na verifica√ß√£o das depend√™ncias do sistema RAG"
    exit 1
fi

# Criar √≠ndice FAISS ultra-avan√ßado durante o setup
log_info "Criando √≠ndice FAISS ultra-avan√ßado..."
echo "üèóÔ∏è Processando dados da Copa do Mundo com configura√ß√µes ultra-avan√ßadas:"
echo "   ‚Ä¢ Chunking multi-n√≠vel: 300/800/1500 caracteres"
echo "   ‚Ä¢ Embedding multil√≠ngue: paraphrase-multilingual-mpnet-base-v2"
echo "   ‚Ä¢ Retriever MMR para m√°xima precis√£o (k=8, fetch_k=20, Œª=0.7)"
echo "   ‚Ä¢ Processamento em lotes para efici√™ncia"
echo "   ‚Ä¢ Normaliza√ß√£o de embeddings ativada"
echo "   ‚è±Ô∏è Este processo pode demorar 3-5 minutos na primeira vez..."
echo "   üí° Aguarde, isso √© feito apenas uma vez no setup!"
echo ""

if python -c "from api import setup_rag_system; setup_rag_system()"; then
    log_success "√çndice FAISS ultra-avan√ßado criado com sucesso!"
    echo "üìä Estat√≠sticas do √≠ndice criado:"
    if [ -f "faiss_index_enhanced_/index.pkl" ]; then
        python -c "
import pickle
try:
    with open('faiss_index_enhanced_/index.pkl', 'rb') as f:
        vectorstore = pickle.load(f)
    print(f'   ‚Ä¢ Total de documentos indexados: {len(vectorstore.docstore._dict)}')
    print('   ‚Ä¢ Sistema pronto para consultas ultra-precisas!')
except Exception as e:
    print(f'   ‚Ä¢ √çndice criado (erro ao ler estat√≠sticas: {e})')
"
    fi
else
    log_error "Falha ao criar √≠ndice FAISS ultra-avan√ßado"
    echo "üí° Poss√≠veis solu√ß√µes:"
    echo "   1. Verifique se o Ollama est√° rodando: ollama serve"
    echo "   2. Verifique se os modelos est√£o instalados: ollama list"
    echo "   3. Verifique se h√° espa√ßo em disco suficiente"
    exit 1
fi

log_success "Sistema RAG ultra-restritivo configurado e √≠ndice criado!"

# 9. Verificar configura√ß√£o do modelo no backend
log_info "Verificando configura√ß√£o do modelo no backend..."
if grep -q "qwen2.5:3b" ~/Chat-sport-PAA/backend/api.py; then
    log_success "Backend configurado para usar qwen2.5:3b (modelo principal)"
else
    log_warning "Backend pode n√£o estar configurado corretamente"
fi

# 10. Tornar scripts execut√°veis
log_info "Configurando permiss√µes..."
chmod +x ~/Chat-sport-PAA/start.sh
chmod +x ~/Chat-sport-PAA/start_system.ps1
chmod +x ~/Chat-sport-PAA/start_backend.ps1
log_success "Permiss√µes configuradas"

# 11. Verifica√ß√£o final do Ollama com novos modelos
log_info "Verifica√ß√£o final do Ollama com modelos otimizados..."
if ! command -v ollama &> /dev/null; then
    log_warning "Ollama n√£o encontrado!"
    echo ""
    echo "üì• Para instalar Ollama:"
    echo "   curl -fsSL https://ollama.ai/install.sh | sh"
    echo ""
    echo "üì• Depois execute:"
    echo "   ollama serve"
    echo "   ollama pull qwen2.5:3b    # Modelo principal para portugu√™s"
    echo "   ollama pull llama3.2      # Modelo fallback"
    echo ""
else
    log_success "Ollama encontrado"
    
    # Verificar se est√° rodando
    if ! pgrep -x "ollama" > /dev/null; then
        log_warning "Ollama n√£o est√° rodando"
        echo "üí° Para iniciar: ollama serve"
    else
        log_success "Ollama est√° rodando"
        
        # Verificar modelos instalados
        models_installed=""
        if ollama list | grep -q "qwen2.5:3b"; then
            models_installed+="‚úÖ qwen2.5:3b (principal) "
        else
            models_installed+="‚ùå qwen2.5:3b "
        fi
        
        if ollama list | grep -q "llama3.2"; then
            models_installed+="‚úÖ llama3.2 (fallback)"
        else
            models_installed+="‚ùå llama3.2"
        fi
        
        log_success "Ollama est√° rodando - Modelos: $models_installed"
    fi
fi

# 12. Configura√ß√£o final
log_info "Finalizando configura√ß√£o ultra-otimizada..."

echo ""
echo "üèÜ ==========================================="
echo "üèÜ  WORLD CUP RAG CHATBOT ULTRA-OTIMIZADO!"
echo "üèÜ ==========================================="
echo ""
echo "üß† Sistema RAG Ultra-Restritivo configurado:"
echo "   ‚Ä¢ Modelo principal: qwen2.5:3b (otimizado para portugu√™s)"
echo "   ‚Ä¢ Modelo fallback: llama3.2"
echo "   ‚Ä¢ Dados ultra-estruturados para evitar alucina√ß√µes"
echo "   ‚Ä¢ Distin√ß√£o clara entre sede e campe√£o"
echo "   ‚Ä¢ Chunking multi-n√≠vel: 300/800/1500 caracteres"
echo "   ‚Ä¢ Embedding multil√≠ngue: paraphrase-multilingual-mpnet-base-v2"
echo "   ‚Ä¢ Retriever MMR: k=8, fetch_k=20, Œª=0.7"
echo "   ‚Ä¢ √çndice FAISS ultra-avan√ßado PR√â-CRIADO ‚úÖ"
echo ""
echo "üìö Dados dispon√≠veis:"
echo "   ‚Ä¢ Hist√≥rico completo da Copa do Mundo (1930-2022)"
echo "   ‚Ä¢ Campe√µes, vices e artilheiros estruturados"
echo "   ‚Ä¢ M√∫ltiplas varia√ß√µes de perguntas em portugu√™s"
echo "   ‚Ä¢ Rankings FIFA atualizados"
echo "   ‚Ä¢ Estat√≠sticas de partidas detalhadas"
echo ""
echo "üöÄ Para iniciar o sistema (r√°pido, √≠ndice j√° criado):"
echo "   ./start.sh"
echo ""
echo "üåê Acesse o chatbot em:"
echo "   http://localhost:5173"
echo ""
echo "üì° API dispon√≠vel em:"
echo "   http://localhost:8000/docs"
echo ""
echo "üí° Perguntas testadas e otimizadas:"
echo "   ‚Ä¢ Quantas copas o Brasil tem?"
echo "   ‚Ä¢ Quem foi campe√£o em 2022? (Argentina, n√£o Qatar)"
echo "   ‚Ä¢ Quem foi campe√£o em 2002? (Brasil, n√£o Jap√£o/Coreia)"
echo "   ‚Ä¢ Qual pa√≠s sediou mais Copas do Mundo?"
echo "   ‚Ä¢ Quem foi o artilheiro da Copa de 2018?"
echo "   ‚Ä¢ Onde foi a Copa de 2014? (Brasil = sede)"
echo "   ‚Ä¢ Vice-campe√£o de 2022? (Fran√ßa)"
echo ""
echo "‚ö†Ô∏è  Sistema configurado para evitar confus√£o entre:"
echo "   ‚Ä¢ SEDE (onde aconteceu) ‚â† CAMPE√ÉO (quem ganhou)"
echo "   ‚Ä¢ Exemplo: Copa 2022 - SEDE: Qatar, CAMPE√ÉO: Argentina"
echo ""
echo "‚ö° Performance esperada (ap√≥s setup completo):"
echo "   ‚Ä¢ Sauda√ß√µes: instant√¢neo"
echo "   ‚Ä¢ Perguntas sobre campe√µes: < 2s"
echo "   ‚Ä¢ Perguntas sobre artilheiros: < 3s"
echo "   ‚Ä¢ Perguntas complexas: 3-5s"
echo "   ‚Ä¢ Inicializa√ß√£o r√°pida: ~15s (√≠ndice pr√©-criado!)"
echo ""
log_success "Setup completo! Sistema pronto para uso ultra-r√°pido!"
