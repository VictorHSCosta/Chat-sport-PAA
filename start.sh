#!/bin/bash

# Script otimizado para iniciar o Chat Sport - Sistema RAG Ultra-R√°pido
echo "üöÄ Iniciando Chat Sport - Sistema RAG Ultra-Perform√°tico"
echo "‚ö° Vers√£o Otimizada com Cache Inteligente e Respostas R√°pidas"
echo ""

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para log colorido
log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# Verificar se Ollama est√° rodando
log_info "Verificando Ollama..."
if ! pgrep -x "ollama" > /dev/null; then
    log_error "Ollama n√£o est√° rodando!"
    echo "üí° Para iniciar o Ollama:"
    echo "   - Abra um novo terminal"
    echo "   - Execute: ollama serve"
    echo "   - Deixe rodando em background"
    exit 1
fi

log_success "Ollama est√° rodando"

# Verificar se o modelo tinyllama est√° dispon√≠vel
log_info "Verificando modelo tinyllama..."
if ! ollama list | grep -q "tinyllama"; then
    log_warning "Modelo tinyllama n√£o encontrado"
    echo "üì• Baixando modelo tinyllama (pode demorar alguns minutos)..."
    ollama pull tinyllama
    if [ $? -eq 0 ]; then
        log_success "Modelo tinyllama baixado com sucesso"
    else
        log_error "Falha ao baixar modelo tinyllama"
        exit 1
    fi
else
    log_success "Modelo tinyllama dispon√≠vel"
fi

# Verificar depend√™ncias do Python
check_python_deps() {
    log_info "Verificando depend√™ncias Python..."
    cd ~/Chat-sport-PAA/backend
    
    if [ ! -d "footbot" ]; then
        log_error "Ambiente virtual 'footbot' n√£o encontrado"
        echo "üí° Execute primeiro: python -m venv footbot"
        exit 1
    fi
    
    source footbot/bin/activate
    
    # Verificar se as principais depend√™ncias est√£o instaladas
    python -c "import fastapi, uvicorn, langchain, faiss" 2>/dev/null
    if [ $? -ne 0 ]; then
        log_warning "Depend√™ncias Python n√£o est√£o completas"
        echo "üì¶ Instalando/atualizando depend√™ncias..."
        pip install -r requirements.txt
    fi
    
    log_success "Depend√™ncias Python verificadas"
}

# Otimizar √≠ndice FAISS se necess√°rio
optimize_index() {
    log_info "Verificando √≠ndice FAISS..."
    cd ~/Chat-sport-PAA/backend
    source footbot/bin/activate
    
    if [ ! -f "faiss_index_/index.faiss" ]; then
        log_warning "√çndice FAISS n√£o encontrado"
        echo "üèóÔ∏è Criando √≠ndice FAISS otimizado..."
        python optimize_index.py
        if [ $? -eq 0 ]; then
            log_success "√çndice FAISS otimizado criado"
        else
            log_error "Falha ao criar √≠ndice FAISS"
            exit 1
        fi
    else
        # Verificar se o √≠ndice √© antigo (mais de 1 dia)
        if find "faiss_index_/index.faiss" -mtime +1 2>/dev/null | grep -q .; then
            log_warning "√çndice FAISS √© antigo, recriando vers√£o otimizada..."
            python optimize_index.py
        else
            log_success "√çndice FAISS otimizado est√° atualizado"
        fi
    fi
}

# Fun√ß√£o para iniciar backend otimizado
start_backend() {
    log_info "Iniciando backend otimizado..."
    cd ~/Chat-sport-PAA/backend
    source footbot/bin/activate
    
    echo ""
    echo "üéØ Configura√ß√µes de Performance:"
    echo "   - Cache inteligente ativado"
    echo "   - Respostas r√°pidas para Pel√©, Messi, Copa do Mundo"
    echo "   - Timeout otimizado: 3 segundos"
    echo "   - Chunks mini: 300 caracteres"
    echo "   - LLM limitado: 30 tokens"
    echo ""
    
    log_success "Backend iniciado em http://localhost:8000"
    echo "üìä Documenta√ß√£o: http://localhost:8000/docs"
    echo "üîç Health check: http://localhost:8000/health"
    echo ""
    
    python api.py
}

# Fun√ß√£o para iniciar frontend
start_frontend() {
    log_info "Iniciando frontend..."
    cd ~/Chat-sport-PAA/Front/front-end
    
    # Verificar se node_modules existe
    if [ ! -d "node_modules" ]; then
        log_warning "Depend√™ncias frontend n√£o encontradas"
        echo "üì¶ Instalando depend√™ncias..."
        
        # Verificar qual gerenciador de pacotes usar
        if command -v pnpm &> /dev/null; then
            pnpm install
        elif command -v yarn &> /dev/null; then
            yarn install
        else
            npm install
        fi
    fi
    
    log_success "Frontend iniciado em http://localhost:5173"
    echo "üåê Interface do chat dispon√≠vel"
    echo ""
    
    # Usar o gerenciador de pacotes dispon√≠vel
    if command -v pnpm &> /dev/null; then
        pnpm run dev
    elif command -v yarn &> /dev/null; then
        yarn dev
    else
        npm run dev
    fi
}

# Verificar depend√™ncias
check_python_deps
optimize_index

# Verificar argumentos
case "$1" in
    "backend")
        start_backend
        ;;
    "frontend")
        start_frontend
        ;;
    "test")
        log_info "Executando testes de performance..."
        cd ~/Chat-sport-PAA/backend
        source footbot/bin/activate
        chmod +x test_performance.sh
        ./test_performance.sh
        ;;
    "optimize")
        log_info "Recriando √≠ndice FAISS otimizado..."
        cd ~/Chat-sport-PAA/backend
        source footbot/bin/activate
        python optimize_index.py
        log_success "Otimiza√ß√£o conclu√≠da!"
        ;;
    "both"|"")
        echo "üîÑ Iniciando backend e frontend otimizados..."
        echo ""
        
        # Iniciar backend em background
        start_backend &
        BACKEND_PID=$!
        
        # Aguardar backend inicializar
        log_info "Aguardando backend inicializar..."
        sleep 8
        
        # Verificar se backend est√° funcionando
        if curl -s http://localhost:8000/health > /dev/null; then
            log_success "Backend inicializado com sucesso"
        else
            log_warning "Backend pode estar demorando para inicializar"
        fi
        
        # Iniciar frontend
        start_frontend &
        FRONTEND_PID=$!
        
        echo ""
        log_success "Ambos os servi√ßos foram iniciados!"
        echo ""
        echo "üéØ URLs importantes:"
        echo "   üìä Backend API: http://localhost:8000"
        echo "   üìö Docs API: http://localhost:8000/docs"
        echo "   üåê Frontend: http://localhost:5173"
        echo ""
        echo "‚ö° Performance esperada:"
        echo "   - Perguntas sobre Pel√©: < 0.5s"
        echo "   - Outras perguntas: 1-3s"
        echo "   - Timeout m√°ximo: 3s"
        echo ""
        echo "Para parar os servi√ßos, pressione Ctrl+C"
        
        # Aguardar interrup√ß√£o
        trap 'kill $BACKEND_PID $FRONTEND_PID 2>/dev/null' INT
        wait $BACKEND_PID $FRONTEND_PID
        ;;
    *)
        echo "Uso: $0 [op√ß√£o]"
        echo ""
        echo "Op√ß√µes:"
        echo "  backend   - Iniciar apenas o backend otimizado"
        echo "  frontend  - Iniciar apenas o frontend"
        echo "  both      - Iniciar ambos (padr√£o)"
        echo "  test      - Executar testes de performance"
        echo "  optimize  - Recriar √≠ndice FAISS otimizado"
        echo ""
        echo "Exemplos:"
        echo "  ./start.sh              # Inicia tudo"
        echo "  ./start.sh backend      # S√≥ backend"
        echo "  ./start.sh optimize     # Otimiza √≠ndice"
        echo "  ./start.sh test         # Testa performance"
        exit 1
        ;;
esac
